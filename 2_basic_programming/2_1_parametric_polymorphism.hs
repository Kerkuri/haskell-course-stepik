module ParametricPoly where
-- Про функцию говорят, что она обладает полиморфным поведением,
-- если она может быть вызвана на значениях разных типов.
-- Пример: оператор сложения "+"
-- 
-- Выделяют два типа полиморфизма: ПАРАМЕТРИЧЕСКИЙ и СПЕЦИАЛЬНЫЙ.
-- ПАРАМЕТРИЧЕСКИЙ полиморфизм - код функции одинаков для всех типов.
-- СПЕЦИАЛЬНЫЙ полиморфизм - для каждого типа есть своя реализация. Пример: оператор сложения (для Integer и Double разный код)

-- ПРИМЕР полиморфной параметрически функции:
-- нет никакого ограничения на тип аргумента:
id x = x
-- Тип функции id : тип аргументов и тип результата - произволен
-- ParametricPoly.id :: p -> p

-- Здесь интересно: работает транзитивность типов:
-- :t (id id)
-- id :: p -> p

-- ПРИМЕР полиморфной функции с двумя аргументами:
id2 x y = x
-- :t (id2 id2)
-- id2 :: p1 -> p2 -> p1

-- У id2 есть аналог в стандарной библиотеке - const
-- const :: a -> b -> a

-- ПРИМЕР константы полиморфного типа:
-- undefined :: GHC.Stack.Types.HasCallStack => a
-- Т.е. константу undefined можно использовать в ВЫРАЖЕНИИ ЛЮБОГО ТИПА

-- Аналогично себя ведет error:
-- :t error 
-- Принимает строковую константу и возвращает произвольный тип 'a':
-- error :: GHC.Stack.Types.HasCallStack => [Char] -> a
-- :t error "AAA"
-- error "AAA" :: a

getSecondFrom x1 x2 x3 = x2

weird :: a -> a -> b -> a -> a
weird x1 x2 x3 x4 = x1


-- СТЕПЕНЬ полиморфизма функции можно ограничить:

-- аналог id выше, но работает только с конкретным типом:
mono :: Char -> Char
mono x = x

-- ПРИМЕР ЧАСТИЧНО ОГРАНИЧЕННОГО ПОЛИМОРФИЗМА.
-- задание аргумента произвольного типа:
semiMono :: Char -> p1 -> Char
semiMono x y = x


-- ФУНКЦИИ ВЫСШИХ ПОРЯДКОВ
-- Функция высшего порядка - это функция, которая принимает в качестве аргумента другую функцию.
-- Пример такой функции - оператор $:
-- ($) :: (a -> b) -> a -> b

apply2 :: (a -> a) -> a -> a
apply2 f x = f $ f x
